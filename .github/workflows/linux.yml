name: Linux Build CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  build:
    name: Release Build
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    #runs-on: ubuntu-latest
    # Try 18.04 assume binaries will work on 20.04 + 
    runs-on: ubuntu-18.04
    
    strategy:
      matrix:
        # Might be useful to have all these combinations but for now don't build on github Actions, so use limited to a subset.
        # x86 doesn't work because of 
        # /usr/lib/x86_64-linux-gnu/libz.so: error adding symbols: File in wrong format
        # configuration: ['Release', 'Debug', 'RelWithDebInfo']
        configuration: ['Release']
        platform: ['x64'] #'x86'
        
    steps:   
      - uses: actions/checkout@v2.3.4
        with:
          submodules: 'true'
          fetch-depth: '0'

      - name: install multi-lib
        run: |
          if [[ "${{matrix.platform}}" == "x86" ]]; then
            sudo apt-get install gcc-multilib g++-multilib
          fi

      - name: Configure CMake
        # Configure CMake in a 'build'-platform subdirectory.
        #        
        # Configured this way because came across information claiming for windows builds have to be in 
        # different directories when for different platforms.
        #
        # We may want to build with LLVM_BUILD_TOOLS=1 such that we get llvm-config, so we can get the library link order.
        run: |
          if [[ "${{matrix.platform}}" == "x86" ]]; then
            TARGET_OPTIONS="-DLLVM_BUILD_32_BITS=1"
          else
            TARGET_OPTIONS=""
          fi
          
          cmake llvm -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.configuration}} -DCMAKE_CXX_VISIBILITY_PRESET="hidden" -DLLVM_ENABLE_PROJECTS="clang" -DLLVM_TARGETS_TO_BUILD="X86;ARM" -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AArch64" -DCLANG_BUILD_TOOLS=0 -DCLANG_ENABLE_STATIC_ANALYZER=0 -DCLANG_ENABLE_ARCMT=0 -DCLANG_INCLUDE_DOCS=0 -DCLANG_INCLUDE_TESTS=0 -DLLVM_BUILD_LLVM_C_DYLIB=0 -DLLVM_INCLUDE_BENCHMARKS=0 -DLLVM_INCLUDE_DOCS=0 -DLLVM_INCLUDE_EXAMPLES=0 -DLLVM_BUILD_TOOLS=1 -DLLVM_INCLUDE_TESTS=0 -DLLVM_ENABLE_TERMINFO=0 ${TARGET_OPTIONS}
      
      - name: Build
        run: 
          cmake --build ${{github.workspace}}/build --config ${{matrix.configuration}} -j`nproc`
          
      - name: archive
        id: archive
        run: |
          echo "achiving files..."
          
          if [[ "${{matrix.platform}}" == "x86" ]]; then
            PLATFORM_NAME="linux-x86"
          else
            PLATFORM_NAME="linux-x86_64"
          fi
          
          LLVM_VERSION=`git log --pretty=format:'%h' -n 1`
          
          BIN_ARCHIVE="llvm-$LLVM_VERSION-$PLATFORM_NAME-${{matrix.configuration}}.zip"

          zip "$BIN_ARCHIVE" README.md
          zip "$BIN_ARCHIVE" -r llvm/include/
          zip "$BIN_ARCHIVE" -r clang/include/
          zip "$BIN_ARCHIVE" -r build/include/
          zip "$BIN_ARCHIVE" build/lib/*.a
          zip "$BIN_ARCHIVE" -r build/tools/clang/include/clang/
          zip "$BIN_ARCHIVE" build/bin/llvm-config

          echo "name=BINARY_ARCHIVE::$BIN_ARCHIVE"
          echo "::set-output name=BINARY_ARCHIVE::$BIN_ARCHIVE"

      - uses: actions/upload-artifact@v3
        with:
          name: slang-build-${{matrix.configuration}}-${{matrix.platform}}-${{matrix.compiler}}
          path: |
            ${{ steps.archive.outputs.BINARY_ARCHIVE }}
          
      